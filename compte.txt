import React, { useEffect, useState } from "react";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import Paper from "@mui/material/Paper";
import axios from "axios";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import "./Achat.css";
import AddIcon from "@mui/icons-material/Add";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogTitle from "@mui/material/DialogTitle";
import ReactPDF from "@react-pdf/renderer";
import TextField from "@mui/material/TextField";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import InputLabel from "@mui/material/InputLabel";
import MenuItem from "@mui/material/MenuItem";
import FormControl from "@mui/material/FormControl";
import Select from "@mui/material/Select";
import pdfDocFacture from "./pdfDocFacture";
import {
  Document,
  Page,
  Text,
  View,
  StyleSheet,
  PDFViewer,
} from "@react-pdf/renderer";
import { Fab } from "@mui/material";
function Achat() {
  const [open, setOpen] = useState(false);
  const [startDate, setStartDate] = useState("");
  const [dataTransactions, setDataTransactions] = useState([]);
  const [filteredDataTransactions, setFilteredDataTransactions] = useState([]);
  const generatePDF = () => {
    ReactPDF.render(<pdfDocFacture />, `${__dirname}/example.pdf`);
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get("http://localhost:8000/api/achat");
        console.log(response.data);
        setDataTransactions(response.data);
      } catch (error) {
        console.error(error);
      }
    };
    fetchData();
  }, []);

  const formating = (data) => {
    const mois = {
      Jan: "01",
      Feb: "02",
      Mar: "03",
      Apr: "04",
      May: "05",
      Jun: "06",
      Jul: "07",
      Aug: "08",
      Sep: "09",
      Oct: "10",
      Nov: "11",
      Dec: "12",
    };

    const dateStr = data.toString();
    const o = dateStr.split(" ");
    const k = o.slice(1, 4);
    console.log(k);
    const day = k[1]; // Jour
    const month = mois[k[0]]; // Mois
    const year = k[2]; // Année
    const formattedDate = `${year}-${month}-${day}`;
    console.log(formattedDate);
    return formattedDate;
  };
  const handleClose = () => {
    setOpen(false);
  };
  const handleSubmit = async (event) => {
    event.preventDefault();
    const formData = new FormData(event.currentTarget);
    const formJson = Object.fromEntries(formData.entries());

    const res = await axios.post("http://localhost:8000/api/achat/", formJson);
    if (res) {
      handleClose();
      alert("client ajouté dans la base de donné");
      window.location.reload();
    }
  };
  useEffect(() => {
    const filtered = dataTransactions.filter((achat) => {
      // console.log(achat.achat.created_at.slice(0, 10));
      return achat.created_at.slice(0, 10).includes(startDate);
    });

    setFilteredDataTransactions(filtered);
  }, [dataTransactions, startDate]);
  const handleClickOpen = () => {
    setOpen(true);
  };
  return (
    <div className="contenaire">
      <div className="dic2">
        <Fab color="primary" aria-label="add" onClick={handleClickOpen}>
          <AddIcon />
        </Fab>
      </div>
      <Dialog
        open={open}
        onClose={handleClose}
        PaperProps={{
          component: "form",
          onSubmit: handleSubmit,
        }}
      >
        <DialogTitle>Client Add</DialogTitle>
        <DialogContent>
          <FormControl fullWidth></FormControl>
          <TextField
            autoFocus
            required
            margin="dense"
            id="scooters_id"
            name="scooters_id"
            label="N° Scooter"
            type="number"
            fullWidth
            variant="standard"
          />
          <TextField
            autoFocus
            required
            margin="dense"
            id="client_id"
            name="client_id"
            label="N° client"
            type="number"
            fullWidth
            variant="standard"
          />
          <TextField
            autoFocus
            required
            margin="dense"
            id="qteAchat"
            name="qteAchat"
            label="quantité"
            type="number"
            fullWidth
            variant="standard"
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button type="submit">Add</Button>
        </DialogActions>
      </Dialog>
      <LocalizationProvider dateAdapter={AdapterDayjs}>
        <DatePicker
          onChange={(e) => {
            setStartDate(formating(e.$d));
          }}
        />
      </LocalizationProvider>

      <TableContainer component={Paper} className="espace">
        <Table sx={{ minWidth: 800 }} aria-label="a dense table">
          <TableHead>
            <TableRow>
              <TableCell>Date de Transaction</TableCell>
              <TableCell align="right">Scooter</TableCell>
              <TableCell align="right">nom du Client</TableCell>
              <TableCell align="right">quantité</TableCell>
              <TableCell align="right">Prix Total</TableCell>
              <TableCell align="right">download</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filteredDataTransactions.map((transaction) => (
              <TableRow key={transaction.id}>
                <TableCell align="right">
                  {transaction.created_at.slice(0, 10)}
                </TableCell>
                <TableCell align="right">
                  {transaction.scooter.nomScooter}
                </TableCell>
                <TableCell align="right">{transaction.client.nomCli}</TableCell>
                <TableCell align="right">{transaction.qteAchat}</TableCell>
                <TableCell align="right">
                  {transaction.scooter.prixScooter * transaction.qteAchat}
                </TableCell>
                <TableCell align="right">
                  <button>Telecharger</button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </div>
  );
}

export default Achat;
